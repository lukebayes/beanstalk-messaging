#!/usr/bin/env ruby
require 'yaml'
require 'pp'

$LOAD_PATH << File.join(File.dirname(__FILE__), *%w[.. vendor plugins beanstalk_messaging vendor beanstalk-client-0.6.0])
$LOAD_PATH << File.join(File.dirname(__FILE__), *%w[.. vendor plugins beanstalk_messaging lib])

require 'beanstalk_manager'

PID_FOLDER = File.join(File.dirname(__FILE__), *%w[.. tmp pids])
CONFIG = YAML.load(File.open(File.join(File.dirname(__FILE__), *%w[.. config beanstalk.yml])))
MANAGER = Beanstalk::DaemonManager.new(PID_FOLDER)

CONFIG.each { |name, settings| MANAGER.register_daemon(name, settings[:host], settings[:port]) }

begin
  case ARGV[0]
  
    when 'start'
      if name = ARGV[1]
        puts "Starting #{name} beanstalk instance..."
        pid = MANAGER.run(name.to_sym)
        puts "Started with pid #{pid}."
      else
        puts "Starting all beanstalk instances..."
        pids = MANAGER.run_all
        puts "Started #{pids.length} beanstalk instances with pids [#{pids.join(',')}]."
      end
  
    when 'stop'
      if name = ARGV[1]
        puts "Stopping #{name} beanstalk instance."
        MANAGER.kill(name.to_sym)
      else
        puts "Stopping all running beanstalk instances."
        MANAGER.kill_all
      end
      puts "Done."
    
    when 'restart'
      if name = ARGV[1]
        puts "Restarting #{name} beanstalk instance..."
        MANAGER.kill(name.to_sym)
        sleep 0.5
        pid = MANAGER.run(name.to_sym)
        puts "Done (pid: [#{pid}])."
      else
        puts "Restarting all beanstalk instances..."
        MANAGER.kill_all
        sleep 0.5
        pids = MANAGER.run_all
        puts "Done (pids: [#{pids.join(',')}])."
      end
    
    when 'status'
      MANAGER.stats.each do |name, stats|
        print "-- #{name} queue: "
        pp stats
      end
    
    else
      puts "Usage: beanstalk {start|stop|restart|status} [queue_name]"
    
  end
rescue Beanstalk::UnknownDaemon
  puts "Uknown daemon. Please check your configuration file."
  exit 1
end